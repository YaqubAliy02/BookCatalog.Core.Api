@page "/mainpage/{id}"
@using BookCatalog.Core.Web.Models
@using BookCatalog.Core.Web.Models.DTOs
@using BookCatalog.Core.Web.Models.DTOs.Books
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
<h3>Book Detail</h3>

@if (book is not null)
{
    <div class="row">
        <div class="col-md-4">
            <img class="img-fluid" src="@book.Thubnail" alt="@book.Name" style="width: 100%; height: 600px;" />
        </div>
        <div class="col-md-8">
            <h2><strong>Name:</strong> @book.Name</h2>
            <a href="@($"/mainpage{book.Authors}")"></a>
            <p><strong>Author:</strong> @string.Join(", ", book.Authors.Select(a => a.FullName))</p>
            <p><strong>Description:</strong> @book.Description</p>
            <p style="color:green;"><strong>FREE</strong></p>
            <a href="@(book.BlobPath)" target="_blank" style="display: block; margin-bottom:20px; text-decoration: none;">Review</a>

            <a href="/mainpage" class="btn btn-primary">Back</a>
            <button class="btn btn-primary" @onclick="() => DownloadEbook()">Download</button>
            <button class="btn" style="background-color:orange">Update</button>
            <button class="btn btn-danger" @onclick="DeleteBook">Delete</button>
        </div>
    </div>
    <Confirm ConfirmationChanged="ConfirmDelete" @ref="DeleteConfirmation"></Confirm>

    @foreach(var author in book.Authors)
    {
        <div class="card mt-3 bg-light">
            <div class="card-body">
                <h2 class="card-title text-dark"><strong>@author.FullName</strong></h2>
                <img src="@author.AuthorPhoto" style="width:160px; height:200px; display:inline-block;" alt="Alternate Text" />
                <p class="card-text text-dark">
                    @author.AboutAuthor
                </p>
                <p class="card-text text-dark">
                    <strong>@author.BirthDate</strong>
                </p>  
                <p class="card-text text-dark">
                    <strong>@author.Gender</strong>
                </p>
            </div>
        </div>
    }
    
}
else
{
    <p>Loading book details...</p>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private GetAllBooksDTO book;
    public List<GetAllBooksDTO> books = new List<GetAllBooksDTO>();
    protected Confirm DeleteConfirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>("/api/Book/GetAllBooks");
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            book = await HttpClient.GetFromJsonAsync<GetAllBooksDTO>($"https://localhost:7282/api/Book/GetBookById/{this.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching book details: {ex.Message}");
        }
    }

    private async Task DownloadEbook()
    {
        var blobPath = book.BlobPath;
        var getFileName = Path.GetFileName(blobPath);
        var url = $"https://localhost:7282/api/EBook/download/{getFileName}";
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    private void DeleteBook()
    {
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete(bool deleteConfirmed)
    {
        if(deleteConfirmed)
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"api/Book/DeleteBook?Id={book.Id}");

                if (response.IsSuccessStatusCode)
                {
                    books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>("/api/Book/GetAllBooks");
                    NavigationManager.NavigateTo("/mainpage");
                    // StateHasChanged();
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine($"Error deleting the book: {exception.Message}");
            }
        }
    }
}
