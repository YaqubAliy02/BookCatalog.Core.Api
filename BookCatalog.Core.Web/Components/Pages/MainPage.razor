@page "/mainpage"
@using BookCatalog.Core.Web.Models
@using BookCatalog.Core.Web.Models.DTOs.Book
@using Domain.Enums
@inject HttpClient HttpClient

@code {
    public List<GetAllBooksDTO> books = new List<GetAllBooksDTO>();
    private List<Author> authors = new List<Author>();
    private string selectedAuthorId;
    private List<BookCategory> categories = new List<BookCategory>();
    private byte? selectedCategory;
    private string _bookFilter = "";
    public string BookFilter
    {
        get => _bookFilter;
        set
        {
            _bookFilter = value;
            try
            {
                _ = FilterBooksAsync();
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }
    }
    private async Task FilterBooksAsync()
    {
        try
        {
            books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>($"/api/Book/SearchBook?SearchText={BookFilter}");
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message + "search error!!!");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>("/api/Book/GetAllBooks");
            authors = await HttpClient.GetFromJsonAsync<List<Author>>("/api/Author/GetAllAuthors");
            categories = await HttpClient.GetFromJsonAsync<List<BookCategory>>("/api/Book/GetBookCategories");
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }

    private async void BookSearch()
    {
        try
        {
            books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>($"/api/Book/SearchBook?SearchText={BookFilter}");
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }

    private async Task ApplyFilters()
    {
        var categoryFilter = selectedCategory.HasValue ? selectedCategory.ToString() : string.Empty;
        var query = $"api/Book/FilterBooks?authorId={selectedAuthorId}&category={categoryFilter}";
        books = await HttpClient.GetFromJsonAsync<List<GetAllBooksDTO>>(query);
    }
}

<div class="main-container">
    <div class="navbar">
        <div class="logo">
            <a href="/mainpage">
                <img style="width:150px; height:110px"
                     src="https://logopond.com/logos/c7bc3e93ee2ebd6f37f0a01c746e1d65.png"
                     alt="E-Book Store" />
            </a>
        </div>

        <div class="col-md-5 mb-2 mb-md-0">
            <input type="text" placeholder="Search Books..."
                   @bind-value="BookFilter" @bind-value:event="oninput" class="form-control" style="height:45px; margin-left: 100px;" />
        </div>

        <div class="col-md-3 mb-2 mb-md-0">
            <button class="btn btn-primary" @onclick="BookSearch"
                    style="padding-top:5px; height:45px;
            width:90px;">
                Search
            </button>
        </div>

        <div class="col-md-1 mb-2 mb-md-0">
            <a style="text-decoration:none;" href="/login">Login</a>
        </div>
        <div class="col-md-1 mb-2 mb-md-0">
            <a style="text-decoration:none;" href="/register">Register</a>
        </div>
    </div>

    <div id="openRolesSection" class="container content-space-1">
        <form>
            <div class="row gx-2 gx-md-3 mb-7">
                <div class="col-sm-6 col-md-4 mb-2 mb-sm-0">
                    <label class="form-label visually-hidden" for="locationsJobCareers">Filter By Category</label>
                    <InputSelect @bind-Value="selectedCategory" class="form-select form-select-lg" id="locationsJobCareers" aria-label="Filter By Category">
                        <option value="">All Categories</option>
                        @if (categories is not null && categories.Any())
                        {
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
 
                <div class="col-sm-6 col-md-4">
                    <label class="form-label visually-hidden" for="departmentsJobCareers">Filter by Author</label>

                    <InputSelect @bind-Value="selectedAuthorId" class="form-select form-select-lg" id="departmentsJobCareers" aria-label="Filter by Author">
                        <option value="">All Authors</option>
                        @if (authors is not null && authors.Any())
                        {
                            @foreach (var author in authors)
                            {
                                <option value="@author.Id">@author.FullName</option>
                            }
                        }
                    </InputSelect>
                </div>
                <div class="col-sm-6 col-md-4">
                    <button type="button" class="btn btn-primary" style="height:45px; width:190px" @onclick="ApplyFilters">Apply Filters</button>
                </div>
            </div>
        </form>
    </div>

    <div style="margin-top:50px; text-align: right;">
        <a href="/upload" class="btn btn-success">Add Author</a>
        <a href="/upload" class="btn btn-success">Upload Book</a>
    </div>

    <div class="books-list" style="margin-top: 1rem;">
        @if (books != null && books.Any())
        {
            <div class="d-flex flex-wrap justify-content-start">
                @foreach (var book in books)
                {
                    <a href="@($"/mainpage/{book.Id}")" style="text-decoration:none; color:inherit;">
                        <div class="card" style="width: 12rem; height:24rem; margin: 8px;">
                            <div class="card-body">
                                <img style="width:160px; height:200px" src="@book.Thubnail" alt="@book.Thubnail" class="book-thubnail" />
                                <p class="card-title" style="font-size: 14px"><strong>Name:</strong> @book.Name</p>
                                <p style="font-size: 14px">
                                    <strong>Author:</strong>
                                    @if (book.Authors is not null && book.Authors.Any())
                                    {
                                        @string.Join(", ", book.Authors.Select(a => a.FullName))
                                    }
                                </p>

                                <p style="font-size: 14px"><strong>Category:</strong> @book.Categories</p>
                                <p style="font-size: 14px"><strong>Publish:</strong> @book.PublishedDate.ToString("yyyy-MM-dd")</p>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }
        else
        {
            <p>No books found</p>
        }
    </div>
</div>